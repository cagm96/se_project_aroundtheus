!function(){"use strict";class e{constructor(e,t,r,s,o,i){let{isLiked:n,name:a,link:l,_id:c}=e;this._isLiked=n,this._name=a,this._link=l,this._id=c,this._cardSelector=t,this._handleImageClick=r,this._handleDeleteButton=s,this._handleLikeButtonClick=o,this._removeLikeButton=i}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._isLiked?(this._removeLikeButton(this._id),this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")):(this._handleLikeButtonClick(this._id),this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active"))})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteButton(this._id,this._cardElement)})),this._cardElement.querySelector(".card__overlay-button").addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}_getElement(){return this._cardSelector.content.querySelector(".card").cloneNode(!0)}getView(){this._cardElement=this._getElement();const e=this._cardElement.querySelector(".card__image");return this._isLiked?this._cardElement.querySelector(".card__like-button").classList.add("card__like-button_active"):this._cardElement.querySelector(".card__like-button").classList.remove("card__like-button_active"),e.src=this._link,e.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e,t){const r=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),r.textContent=t,r.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}toggleButtonState(){const e=this._form.querySelectorAll(this._inputSelector),t=this._form.querySelector(this._submitButtonSelector);this._hasInvalidInput(e)?(t.classList.add(this._inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return Array.from(e).some((e=>!e.validity.valid))}_setEventListeners(){this._form.querySelectorAll(this._inputSelector).forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class r{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}_handleEscClose=e=>{"Escape"===e.key&&this.close()};open(){this._popupElement.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_open")&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}}class s extends r{constructor(e,t){super(e),this._handleFormSubmit=t,this._submitButton=this._popupElement.querySelector(".modal__button"),this._form=this._popupElement.querySelector(".modal__form")}test(){console.log(this._submitButton)}_getInputValues(){const e=[...this._popupElement.querySelectorAll("input")],t={};for(const r of e)t[r.name]=r.value;return t}close(){super.close(),this._form.reset()}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t,this._submitButton),this.close()})),super.setEventListeners()}}const o=document.querySelector("#card-template"),i=document.querySelector("#profile-edit-button"),n=document.forms.modal__form,a=n.querySelector("#profile-title-input"),l=n.querySelector("#profile-description-Input"),c=document.querySelector(".cards__list"),d=document.querySelector(".profile__add-button"),_=document.querySelector("#add-card-modal").querySelector(".modal__form"),u={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},h=document.querySelector(".profile__button"),m=document.querySelector("#profile-avatar-modal"),p=document.querySelector(".profile__image"),E=m.querySelector(".modal__form"),v=new class{constructor(e,t){this._profileName=document.querySelector(e),this._job=document.querySelector(t)}getUserInfo(){return{profileName:this._profileName.textContent,profileJob:this._job.textContent}}setUserInfo(e){this._profileName.textContent=e.name,this._job.textContent=e.about}}(".profile__title",".profile__description"),f=new class{constructor(e,t){this._renderer=e,this._container=t}renderItems(e){e.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){let{name:t,link:r,_id:s}=e;const o=this._renderer({name:t,link:r,_id:s});this._container.prepend(o)}}((function(t){return new e(t,o,((e,t)=>{L.open(e,t)}),((e,t)=>{b.open(),b.setEventListeners(),b.setSubmitAction((()=>{S.deleteCard(e),t.remove()}))}),(e=>{S.likeCard(e).then((e=>{console.log(e)}))}),(e=>{S.unlikeCard(e).then((e=>{console.log(e)}))})).getView()}),c),S=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(`${this._url}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}setUserInfo(e,t){return t.textContent="Saving ...",fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((e=>e.ok?(t.textContent="Save",e.json()):Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}getUserAvatar(){return fetch(`${this._url}/users/me/avatar`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}setUserAvatar(e,t){return t.textContent="Saving ...",fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then((e=>e.ok?(t.textContent="Save",e.json()):Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}getInitialCards(){return fetch(`${this._url}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}addCard(e,t){return t.textContent="Saving ...",fetch(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then((e=>e.ok?(t.textContent="Save",e.json()):Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}likeCard(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}unlikeCard(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>Promise.reject(`Error: ${e}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f1dab6ed-e5ba-44ef-bef1-7369d7e9bf0d","Content-Type":"application/json"}});S.getUserInfo().then((e=>{v.setUserInfo(e)})),S.getInitialCards().then((e=>{f.renderItems(e)})),S.getUserInfo().then((e=>{p.src=e.avatar}));const b=new class extends r{constructor(e){super(e),this._answerButton=this._popupElement.querySelector(".modal__button"),this._form=this._popupElement.querySelector(".modal__form")}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){this._answerButton.addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit(),this.close()})),super.setEventListeners()}}("#delete-card-modal");new t(u,n).enableValidation();const k=new t(u,_);k.enableValidation();const y=new t(u,E);y.enableValidation();const L=new class extends r{constructor(e){super(e),this._imageFull=this._popupElement.querySelector(".modal__image"),this._modalTitle=this._popupElement.querySelector(".modal__image-title")}test(){console.log(this.popupElement)}open(e,t){this._modalTitle.textContent=e,this._imageFull.setAttribute("src",t),this._imageFull.setAttribute("alt",e),super.open()}}("#image-modal");L.setEventListeners();const g=new s("#add-card-modal",((e,t)=>{S.addCard(e,t).then((e=>{f.addItem(e)})),k.toggleButtonState(),g.close()}));g.setEventListeners();const C=new s("#profile-avatar-modal",((e,t)=>{S.setUserAvatar(e,t).then((e=>{p.src=e.avatar})),y.toggleButtonState(),C.close()}));C.setEventListeners();const q=new s("#profile-edit-modal",((e,t)=>{v.setUserInfo(e),S.setUserInfo(e,t),q.close()}));q.setEventListeners(),d.addEventListener("click",(()=>{g.open()})),i.addEventListener("click",(()=>{q.open();const{profileName:e,profileJob:t}=v.getUserInfo();a.value=e,l.value=t})),h.addEventListener("click",(()=>{C.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,