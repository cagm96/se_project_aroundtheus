!function(){"use strict";const e=document.querySelector("#card-template"),t=document.querySelector("#profile-edit-button"),s=document.forms["profile-form"],r=document.forms["avatar-form"],n=s.querySelector("#profile-title-input"),o=s.querySelector("#profile-description-Input"),i=document.querySelector(".cards__list"),a=document.querySelector(".profile__add-button"),l=document.forms["add-card-form"],c={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},d=document.querySelector(".profile__button");class h{constructor(e,t,s,r,n,o){let{isLiked:i,name:a,link:l,_id:c}=e;this._isLiked=i,this._name=a,this._link=l,this._id=c,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=r,this._handleLikeButtonClick=n,this._removeLikeButton=o}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._isLiked?this._removeLikeButton(this):this._handleLikeButtonClick(this)})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteButton(this)})),this._cardElement.querySelector(".card__overlay-button").addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}toggleLikeBtn(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}getId(){return this._id}removeCard(){this._cardElement.remove()}_getElement(){return this._cardSelector.content.querySelector(".card").cloneNode(!0)}getView(){this._cardElement=this._getElement();const e=this._cardElement.querySelector(".card__image");return this._isLiked?this._cardElement.querySelector(".card__like-button").classList.add("card__like-button_active"):this._cardElement.querySelector(".card__like-button").classList.remove("card__like-button_active"),e.src=this._link,e.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._cardElement}}class _{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e,t){const s=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}toggleButtonState(){const e=this._form.querySelectorAll(this._inputSelector),t=this._form.querySelector(this._submitButtonSelector);this._hasInvalidInput(e)?(t.classList.add(this._inactiveButtonClass),t.disabled=!0,t.textContent="Save "):(t.classList.remove(this._inactiveButtonClass),t.disabled=!1)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return Array.from(e).some((e=>!e.validity.valid))}_setEventListeners(){this._form.querySelectorAll(this._inputSelector).forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class u{constructor(e){this._popupElement=document.querySelector(e),this._modalButton=this._popupElement.querySelector(".modal__button"),this._closeButton=this._popupElement.querySelector(".modal__close")}_handleEscClose=e=>{"Escape"===e.key&&this.close()};open(){this._popupElement.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_open")&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}}class m extends u{constructor(e,t){super(e),this._handleFormSubmit=t,this._submitButton=this._popupElement.querySelector(".modal__button"),this._form=this._popupElement.querySelector(".modal__form"),this._submitButtonText=this._submitButton.textContent}test(){console.log(this._submitButton)}_getInputValues(){const e=[...this._popupElement.querySelectorAll("input")],t={};for(const s of e)t[s.name]=s.value;return t}close(){super.close(),this._form.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";console.log(e),this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._form.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t,this._submitButton)})),super.setEventListeners()}}const p=new class{constructor(e,t){this._renderer=e,this._container=t}renderItems(e){e.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){let{name:t,link:s,_id:r}=e;const n=this._renderer({name:t,link:s,_id:r});this._container.prepend(n)}}((function(t){const s=new h(t,e,(function(e,t){L.open(e,t)}),(function(e){v.open(),v.setSubmitAction((()=>{f.deleteCard(e.getId()).then((()=>{v.close(),e.removeCard()})).catch((e=>{console.error(`Error ${e}`)}))}))}),(function(e){f.likeCard(e.getId()).then((e=>{s.toggleLikeBtn()})).catch((e=>{console.error(`Error ${e}`)}))}),(function(e){f.unlikeCard(e.getId()).then((()=>{e.toggleLikeBtn()})).catch((e=>{console.error(`Error ${e}`)}))}));return s.getView()}),i),E=new class{constructor(e,t,s){this._profileName=document.querySelector(e),this._job=document.querySelector(t),this._avatar=document.querySelector(s)}getUserInfo(){return{profileName:this._profileName.textContent,profileJob:this._job.textContent,profileAvatar:this._avatar.textContent}}setUserInfo(e){this._profileName.textContent=e.name,this._job.textContent=e.about}setUserAvatar(e){this._avatar.src=e.avatar}}(".profile__title",".profile__description",".profile__image"),f=new class{constructor(e){this._url=e.baseUrl,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._url}/users/me`,{headers:this._headers}).then(this._checkResponse)}setUserInfo(e){return fetch(`${this._url}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}getUserAvatar(){return fetch(`${this._url}/users/me/avatar`,{headers:this._headers}).then(this._checkResponse)}setUserAvatar(e){return fetch(`${this._url}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._url}/cards`,{headers:this._headers}).then(this._checkResponse)}addCard(e){return fetch(`${this._url}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._url}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}likeCard(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse)}unlikeCard(e){return fetch(`${this._url}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"f1dab6ed-e5ba-44ef-bef1-7369d7e9bf0d","Content-Type":"application/json"}});f.getUserInfo().then((e=>{E.setUserInfo(e),E.setUserAvatar(e)})).catch((e=>{console.error(`Error ${e}`)})),f.getInitialCards().then((e=>{p.renderItems(e)})).catch((e=>{console.error(`Error ${e}`)}));const v=new class extends u{constructor(e){super(e),this._answerButton=this._popupElement.querySelector(".modal__button"),this._form=this._popupElement.querySelector(".modal__form")}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){this._answerButton.addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}}("#delete-card-modal");v.setEventListeners();const g=new _(c,s);g.enableValidation();const S=new _(c,l);S.enableValidation();const b=new _(c,r);b.enableValidation();const L=new class extends u{constructor(e){super(e),this._imageFull=this._popupElement.querySelector(".modal__image"),this._modalTitle=this._popupElement.querySelector(".modal__image-title")}test(){console.log(this.popupElement)}open(e,t){this._modalTitle.textContent=e,this._imageFull.setAttribute("src",t),this._imageFull.setAttribute("alt",e),super.open()}}("#image-modal");L.setEventListeners();const k=new m("#add-card-modal",(e=>{k.renderLoading(!0),f.addCard(e).then((e=>{p.addItem(e),k.close(),S.toggleButtonState()})).catch((e=>{console.error(`Error ${e}`)})).finally((()=>{k.renderLoading(!1)}))}));k.setEventListeners();const y=new m("#profile-avatar-modal",(e=>{y.renderLoading(!0),f.setUserAvatar(e).then((e=>{E.setUserAvatar(e),y.close(),b.toggleButtonState()})).catch((e=>{console.error(`Error ${e}`)})).finally((()=>{y.renderLoading(!1)}))}));y.setEventListeners();const C=new m("#profile-edit-modal",(e=>{E.setUserInfo(e),C.renderLoading(!0),f.setUserInfo(e).then((()=>{C.close(),g.toggleButtonState()})).catch((e=>{console.error(`Error ${e}`)})).finally((()=>{C.renderLoading(!1)}))}));C.setEventListeners(),a.addEventListener("click",(()=>{k.open()})),t.addEventListener("click",(()=>{C.open();const{profileName:e,profileJob:t}=E.getUserInfo();n.value=e,o.value=t})),d.addEventListener("click",(()=>{y.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,